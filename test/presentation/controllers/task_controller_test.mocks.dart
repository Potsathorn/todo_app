// Mocks generated by Mockito 5.4.2 from annotations
// in todo_app/test/presentation/controllers/task_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:todo_app/domain/entities/local/task_entity.dart' as _i4;
import 'package:todo_app/domain/usecases/task_usecase.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskUsecase extends _i1.Mock implements _i2.TaskUsecase {
  MockTaskUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<int> insert({required _i4.TaskEntity? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [],
          {#task: task},
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<List<_i4.TaskEntity>> get({
    required int? page,
    required int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #page: page,
            #limit: limit,
          },
        ),
        returnValue: _i3.Future<List<_i4.TaskEntity>>.value(<_i4.TaskEntity>[]),
      ) as _i3.Future<List<_i4.TaskEntity>>);

  @override
  _i3.Future<int> update({required _i4.TaskEntity? task}) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {#task: task},
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<int> delete({required String? key}) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#key: key},
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);
}
